library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity design is 
	port(
    	clk_i: in std_logic; 
        rst_i: in std_logic
    );

end entity design;

architecture behavior of design is 
	
    --ifetch
    signal pcsrc: std_logic;     
    signal pccurt: std_logic_vector (31 downto 0); 
    signal PCplus4  : std_logic_vector(31 downto 0);
    
    -- controller
    signal op         : std_logic_vector(6 downto 0);
    signal funct3     : std_logic_vector(2 downto 0);
    signal funct7     : std_logic_vector(6 downto 0);
    signal zero       : std_logic;
    signal resultSrc  : std_logic_vector(1 downto 0);
    signal memWrite   : std_logic;
    signal aluSrc     : std_logic;
    signal regWrite   : std_logic;
    signal immSrc     : std_logic_vector(1 downto 0);
    signal aluControl : std_logic_vector(2 downto 0);
    
    -- decoder
    signal instr      : std_logic_vector(31 downto 0);
    signal wd         : std_logic_vector(31 downto 0);
    signal rd1        : std_logic_vector(31 downto 0);
    signal rd2        : std_logic_vector(31 downto 0);
    signal immExt     : std_logic_vector(31 downto 0);
    
    -- execute
    signal aluResult  : std_logic_vector(31 downto 0);

    -- ram
    signal ramOut     : std_logic_vector(31 downto 0);
    
    begin 
    
    ifetch_c: entity work.ifetch 
    	port map (
        	 clk_i => clk_i,
        	 rst_i  => rst_i,    
             pcsrc_i  => pcsrc,    
             imm => immExt,                                  
             pccurrent_o => pccurt,
             pc_plus_4_o => PCplus4
        ); 
     execute_c: entity work.execute 
     	port map (
        	aluSrc => aluSrc, 
        	aluControl => aluControl, 
        	a => rd1, 
            b => rd2, 
            c => immExt, 
        	zero => zero, 
        	result => aluResult        
        );
      
      controller_c: entity work.controller
      	port map (
        	 op  => op, 
    		 funct3 => funct3, 
    		 funct7 => funct7, 
    		 zero  => zero, 
    		 resultSrc => resultSrc, 
    		 memWrite => memWrite, 
    		 PCSrc => pcsrc, 
    		 aluSrc => aluSrc, 
    		 regWrite => regWrite, 
    		 immSrc  => immSrc, 
    		 aluControl => aluControl        	
        );
        
        idecoder_c: entity work.idecoder
        	port map (
            	clk_i => clk_i, 
        		rst_i => rst_i, 
        		regwrite => regWrite, 
        		instr => instr, 
        		immsrc => immSrc, 
        		wd => wd, 
        		immext => immExt, 
        		rd1 => rd1, 
        		rd2 => rd2,         
        		op => op,
        		funct3 => funct3, 
        		funct7 => funct7            	
            );
		
        ram_c: entity work.ram 
        	generic map( 	
            	DATA_WIDTH => 8,
			    ADDRESS_WIDTH => 16,
	            DEPTH => 65535            
            )
        	port map (
            	clk => clk_i, 
       			a  => aluResult, 
       			wd => rd2, 
       			we => memWrite, 
       			rd => ramOut           
            );
            
         rom_c: entity work.rom
         	generic map (
            	DATA_WIDTH => 8,
			    ADDRESS_WIDTH => 16,
	            DEPTH => 65535  
            )
            port map (
    			a => pccurt, 
    			rd => instr
            );    
         
         mux3_c: entity work.mux332
         	port map (
            	d0 => aluResult,
                d1 => ramOut,
                d2 => PCplus4,
    			s => resultSrc, 
    			y => wd            	
            );
	


end architecture behavior; 
